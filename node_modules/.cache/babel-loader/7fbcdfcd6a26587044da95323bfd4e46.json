{"ast":null,"code":"import axios from 'axios';\nimport { toastr } from 'react-redux-toastr';\nimport underscore from 'underscore';\nvar apiSendUsersUrl = 'http://localhost:6998/send';\nvar apiUrl = 'http://localhost:6998/users';\nvar toastrOptions = {\n  timeOut: 3000,\n  onCloseButtonClick: function onCloseButtonClick() {\n    return console.log('Close button was clicked');\n  },\n  showCloseButton: false\n};\nexport var ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport var MAIL_WINNERS = 'winners: mailWinnersAction';\nexport var WINNERS_VALIDATED = 'WINNERS_VALIDATED action';\nexport var UPDATE_PARTICIPATION = 'updateParticipationAction';\n\nvar winnersSelected = function winnersSelected(users) {\n  return {\n    type: MAIL_WINNERS,\n    payload: {\n      users: users\n    }\n  };\n};\n\nvar winnersValidated = function winnersValidated(emails) {\n  return {\n    type: WINNERS_VALIDATED,\n    payload: {\n      emails: emails\n    }\n  };\n}; //déclaration action qui va incréménter ma base de donnée\n\n\nexport var updateParticipation = function updateParticipation(data) {\n  return {\n    type: UPDATE_PARTICIPATION,\n    payload: {\n      participation: data.participation\n    }\n  };\n};\nexport var updateParticipationAction = function updateParticipationAction() {\n  return function (dispatch) {\n    return axios.post(apiUrl, {\n      participation: participation\n    }).then(function (response) {\n      dispatch(updateParticipation(response.data));\n    }).catch(function (error) {\n      throw error;\n    });\n  };\n};\nexport var selectWinnersAction = function selectWinnersAction() {\n  var sampleCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  return function (dispatch, getState) {\n    console.log(sampleCount);\n    var users = getState().usersNotSelected;\n    var sampled = underscore.sample(users, sampleCount);\n    dispatch(winnersSelected(sampled));\n  };\n};\nexport var validateWinnersAction = function validateWinnersAction() {\n  return function (dispatch, getState) {\n    //getState fonction qui permet d'accéder au state\n    var state = getState();\n    var winners = state.winnersByWeek.length > 0 ? state.winnersByWeek[state.winnersByWeek.length - 1].winners : [];\n    var emails = winners.map(function (item) {\n      return item.email;\n    });\n    return axios.post(apiSendUsersUrl, {\n      emails: emails\n    }).then(function (response) {\n      toastr.success('Confirmation', 'Un mail a bien été envoyé aux 3 participants', toastrOptions);\n      dispatch(winnersValidated(emails));\n    }).catch(function (error) {\n      throw error;\n    });\n  };\n};","map":{"version":3,"sources":["/home/emleb/Projets perso/breakfastTime/src/Actions/winnerActions.js"],"names":["axios","toastr","underscore","apiSendUsersUrl","apiUrl","toastrOptions","timeOut","onCloseButtonClick","console","log","showCloseButton","ADD_WINNERS_BY_WEEK","MAIL_WINNERS","WINNERS_VALIDATED","UPDATE_PARTICIPATION","winnersSelected","users","type","payload","winnersValidated","emails","updateParticipation","data","participation","updateParticipationAction","dispatch","post","then","response","catch","error","selectWinnersAction","sampleCount","getState","usersNotSelected","sampled","sample","validateWinnersAction","state","winners","winnersByWeek","length","map","item","email","success"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { toastr } from 'react-redux-toastr';\nimport underscore from 'underscore';\n\nconst apiSendUsersUrl = 'http://localhost:6998/send';\nconst apiUrl = 'http://localhost:6998/users';\n\nconst toastrOptions = {\n  timeOut: 3000,\n  onCloseButtonClick: () => console.log('Close button was clicked'),\n  showCloseButton: false,\n};\n\nexport const ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport const MAIL_WINNERS = 'winners: mailWinnersAction';\nexport const WINNERS_VALIDATED = 'WINNERS_VALIDATED action';\nexport const UPDATE_PARTICIPATION = 'updateParticipationAction';\n\nconst winnersSelected = users => {\n  return {\n    type: MAIL_WINNERS,\n    payload: {\n      users,\n    },\n  };\n};\n\nconst winnersValidated = (emails) => {\n  return {\n    type: WINNERS_VALIDATED,\n    payload : {\n      emails, \n    },\n  };\n};\n\n//déclaration action qui va incréménter ma base de donnée\nexport const updateParticipation = (data) => {\n  return {\n    type: UPDATE_PARTICIPATION,\n    payload: {\n      participation: data.participation,\n    },\n  };\n};\n\nexport const updateParticipationAction = () => {\n  return dispatch => {\n    return axios\n      .post(apiUrl, { participation })\n      .then(response => {\n        dispatch(updateParticipation(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\n\nexport const selectWinnersAction = (sampleCount=3) => {\n  return (dispatch, getState) => {\n    console.log(sampleCount)\n    const users = getState().usersNotSelected;\n    const sampled = underscore.sample(users,  sampleCount);\n    dispatch(winnersSelected(sampled));\n  };\n};\n\nexport const validateWinnersAction = () => {\n  return (dispatch, getState) => {\n    \n    //getState fonction qui permet d'accéder au state\n    const state = getState();\n    const winners =\n      state.winnersByWeek.length > 0\n      \n        ? state.winnersByWeek[state.winnersByWeek.length - 1].winners\n        : [];\n    const emails = winners.map(item => item.email);\n    return axios\n      .post(apiSendUsersUrl, { emails })\n      .then(response => {\n        toastr.success(\n          'Confirmation',\n          'Un mail a bien été envoyé aux 3 participants',\n          toastrOptions,\n        );\n        dispatch(winnersValidated(emails));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}