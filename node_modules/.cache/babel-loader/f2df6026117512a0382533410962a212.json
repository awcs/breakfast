{"ast":null,"code":"import axios from 'axios';\nimport { toastr } from 'react-redux-toastr';\nimport underscore from 'underscore';\nvar apiUrl = 'http://localhost:6999/users';\nvar apiSendUsersUrl = 'http://localhost:6999/send';\nvar toastrOptions = {\n  timeOut: 3000,\n  onCloseButtonClick: function onCloseButtonClick() {\n    return console.log('Close button was clicked');\n  },\n  showCloseButton: false\n};\nexport var ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport var MAIL_WINNERS = 'winners: mailWinnersAction';\n\nvar mailWinners = function mailWinners(users) {\n  return {\n    type: MAIL_WINNERS,\n    payload: {\n      users: users\n    }\n  };\n};\n\nexport var addWinnersByWeekAction = function addWinnersByWeekAction() {\n  return function (dispatch, getState) {\n    var users = getState().users;\n    var sampled = underscore.sample(users, 3);\n    var emails = sampled.map(function (item) {\n      return item.email;\n    });\n    return axios.post(apiSendUsersUrl, {\n      emails: emails\n    }).then(function (response) {\n      dispatch(mailWinners(sampled));\n      toastr.success('Confirmation', 'Un mail a bien été envoyé aux 3 participants', toastrOptions);\n    }).catch(function (error) {\n      throw error;\n    });\n  }; //   return {\n  //       type: ADD_WINNERS_BY_WEEK ,\n  //       payload: {\n  //         //   users: users\n  //       }\n  //   }\n};\nexport var selectWinners = function selectWinners() {\n  return function (dispatch, getState) {\n    var users = getState().users;\n    var sampled = underscore.sample(users, 3);\n    dispatch(mailWinners(sampled));\n  }; //   return {\n  //       type: ADD_WINNERS_BY_WEEK ,\n  //       payload: {\n  //         //   users: users\n  //       }\n  //   }\n}; //Action to send mail to 3 winners\n// export const mailWinnersAction = (data) => {\n//     return (dispatch) => {\n//        return axios.post(apiSendUsersUrl, data) \n//         .then(response => {\n//           dispatch(mailWinners(response.data))\n//         })\n//         .catch(error => {\n//           throw(error);\n//         });\n//     };\n//   };","map":{"version":3,"sources":["/home/emleb/Projets perso/Breakfast/src/Actions/winnerActions.js"],"names":["axios","toastr","underscore","apiUrl","apiSendUsersUrl","toastrOptions","timeOut","onCloseButtonClick","console","log","showCloseButton","ADD_WINNERS_BY_WEEK","MAIL_WINNERS","mailWinners","users","type","payload","addWinnersByWeekAction","dispatch","getState","sampled","sample","emails","map","item","email","post","then","response","success","catch","error","selectWinners"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,oBAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAMC,MAAM,GAAG,6BAAf;AACA,IAAMC,eAAe,GAAG,4BAAxB;AAEA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,IADS;AAElBC,EAAAA,kBAAkB,EAAE;AAAA,WAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAN;AAAA,GAFF;AAGlBC,EAAAA,eAAe,EAAE;AAHC,CAAtB;AAMA,OAAO,IAAMC,mBAAmB,GAAG,iCAA5B;AACP,OAAO,IAAMC,YAAY,GAAG,4BAArB;;AAGP,IAAMC,WAAW,GAAI,SAAfA,WAAe,CAACC,KAAD,EAAW;AAC5B,SAAO;AACLC,IAAAA,IAAI,EAAEH,YADD;AAELI,IAAAA,OAAO,EAAE;AACPF,MAAAA,KAAK,EAALA;AADO;AAFJ,GAAP;AAMD,CAPH;;AASE,OAAO,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAC1C,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAML,KAAK,GAAGK,QAAQ,GAAGL,KAAzB;AACA,QAAMM,OAAO,GAAGlB,UAAU,CAACmB,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB,CAAhB;AACA,QAAMQ,MAAM,GAAGF,OAAO,CAACG,GAAR,CAAY,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,KAAT;AAAA,KAAhB,CAAf;AACA,WAAOzB,KAAK,CAAC0B,IAAN,CAAWtB,eAAX,EAA4B;AAACkB,MAAAA,MAAM,EAANA;AAAD,KAA5B,EACFK,IADE,CACG,UAAAC,QAAQ,EAAI;AACdV,MAAAA,QAAQ,CAACL,WAAW,CAACO,OAAD,CAAZ,CAAR;AACAnB,MAAAA,MAAM,CAAC4B,OAAP,CAAe,cAAf,EAA+B,8CAA/B,EAA+ExB,aAA/E;AACH,KAJE,EAKFyB,KALE,CAKI,UAAAC,KAAK,EAAI;AACZ,YAAMA,KAAN;AACH,KAPE,CAAP;AAQH,GAZD,CAD0C,CAc1C;AACA;AACA;AAEA;AACA;AACA;AAED,CAtBM;AAwBP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO,UAACd,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAML,KAAK,GAAGK,QAAQ,GAAGL,KAAzB;AACA,QAAMM,OAAO,GAAGlB,UAAU,CAACmB,MAAX,CAAkBP,KAAlB,EAAyB,CAAzB,CAAhB;AACAI,IAAAA,QAAQ,CAACL,WAAW,CAACO,OAAD,CAAZ,CAAR;AACH,GAJD,CADiC,CAMjC;AACA;AACA;AAEA;AACA;AACA;AAED,CAdM,C,CAiBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport {toastr} from 'react-redux-toastr'\nimport underscore from 'underscore';\n\nconst apiUrl = 'http://localhost:6999/users';\nconst apiSendUsersUrl = 'http://localhost:6999/send';\n\nconst toastrOptions = {\n    timeOut: 3000, \n    onCloseButtonClick: () => console.log('Close button was clicked'),\n    showCloseButton: false, \n}\n   \nexport const ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport const MAIL_WINNERS = 'winners: mailWinnersAction';\n\n\nconst mailWinners =  (users) => {\n    return {\n      type: MAIL_WINNERS,\n      payload: {\n        users\n      }\n    }\n  };\n\n  export const addWinnersByWeekAction = () => {\n    return (dispatch, getState) => {\n        const users = getState().users;\n        const sampled = underscore.sample(users, 3)\n        const emails = sampled.map(item => item.email)\n        return axios.post(apiSendUsersUrl, {emails}) \n            .then(response => {\n                dispatch(mailWinners(sampled))\n                toastr.success('Confirmation', 'Un mail a bien été envoyé aux 3 participants', toastrOptions)\n            })\n            .catch(error => {\n                throw(error);\n            });\n    }\n    //   return {\n    //       type: ADD_WINNERS_BY_WEEK ,\n    //       payload: {\n\n    //         //   users: users\n    //       }\n    //   }\n\n  }\n\n  export const selectWinners = () => {\n    return (dispatch, getState) => {\n        const users = getState().users;\n        const sampled = underscore.sample(users, 3)\n        dispatch(mailWinners(sampled))\n    }\n    //   return {\n    //       type: ADD_WINNERS_BY_WEEK ,\n    //       payload: {\n\n    //         //   users: users\n    //       }\n    //   }\n\n  }\n\n\n//Action to send mail to 3 winners\n// export const mailWinnersAction = (data) => {\n//     return (dispatch) => {\n//        return axios.post(apiSendUsersUrl, data) \n//         .then(response => {\n//           dispatch(mailWinners(response.data))\n//         })\n//         .catch(error => {\n//           throw(error);\n//         });\n//     };\n//   };\n  \n  \n  "]},"metadata":{},"sourceType":"module"}