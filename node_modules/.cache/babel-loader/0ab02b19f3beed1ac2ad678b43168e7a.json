{"ast":null,"code":"import axios from 'axios';\nimport { toastr } from 'react-redux-toastr';\nimport underscore from 'underscore';\nvar apiUrl = 'http://localhost:6999/users';\nvar apiSendUsersUrl = 'http://localhost:6999/send';\nvar toastrOptions = {\n  timeOut: 3000,\n  onCloseButtonClick: function onCloseButtonClick() {\n    return console.log('Close button was clicked');\n  },\n  showCloseButton: false\n};\nexport var ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport var MAIL_WINNERS = 'winners: mailWinnersAction'; // export const WINNERS_VALIDATED = 'WINNERS_VALIDATED action';\n\nvar winnersSelected = function winnersSelected(users) {\n  return {\n    type: MAIL_WINNERS,\n    payload: {\n      users: users\n    }\n  };\n};\n\nvar winnersValidated = function winnersValidated() {\n  return {\n    type: WINNERS_VALIDATED\n  };\n};\n\nexport var selectWinnersAction = function selectWinnersAction() {\n  return function (dispatch, getState) {\n    var users = getState().users;\n    var sampled = underscore.sample(users, 3);\n    dispatch(winnersSelected(sampled));\n  };\n};\nexport var validateWinnersAction = function validateWinnersAction() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var winners = state.winnersByWeek.length > 0 ? state.winnersByWeek[state.winnersByWeek.length - 1].winners : [];\n    var sampled = underscore.sample(winners, 3);\n    var emails = sampled.map(function (item) {\n      return item.email;\n    });\n    return axios.post(apiSendUsersUrl, {\n      emails: emails\n    }).then(function (response) {\n      toastr.success('Confirmation', 'Un mail a bien été envoyé aux 3 participants', toastrOptions);\n      dispatch(winnersValidated());\n    }).catch(function (error) {\n      throw error;\n    });\n  };\n};","map":{"version":3,"sources":["/home/emleb/Projets perso/Breakfast/src/Actions/winnerActions.js"],"names":["axios","toastr","underscore","apiUrl","apiSendUsersUrl","toastrOptions","timeOut","onCloseButtonClick","console","log","showCloseButton","ADD_WINNERS_BY_WEEK","MAIL_WINNERS","winnersSelected","users","type","payload","winnersValidated","WINNERS_VALIDATED","selectWinnersAction","dispatch","getState","sampled","sample","validateWinnersAction","state","winners","winnersByWeek","length","emails","map","item","email","post","then","response","success","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAMC,MAAM,GAAG,6BAAf;AACA,IAAMC,eAAe,GAAG,4BAAxB;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,kBAAkB,EAAE;AAAA,WAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAN;AAAA,GAFA;AAGpBC,EAAAA,eAAe,EAAE;AAHG,CAAtB;AAMA,OAAO,IAAMC,mBAAmB,GAAG,iCAA5B;AACP,OAAO,IAAMC,YAAY,GAAG,4BAArB,C,CACP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEH,YADD;AAELI,IAAAA,OAAO,EAAE;AACPF,MAAAA,KAAK,EAALA;AADO;AAFJ,GAAP;AAMD,CAPD;;AASA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,SAAO;AACLF,IAAAA,IAAI,EAAEG;AADD,GAAP;AAGD,CAJD;;AAMA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMP,KAAK,GAAGO,QAAQ,GAAGP,KAAzB;AACA,QAAMQ,OAAO,GAAGpB,UAAU,CAACqB,MAAX,CAAkBT,KAAlB,EAAyB,CAAzB,CAAhB;AACAM,IAAAA,QAAQ,CAACP,eAAe,CAACS,OAAD,CAAhB,CAAR;AACD,GAJD;AAKD,CANM;AAQP,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACzC,SAAO,UAACJ,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMI,KAAK,GAAGJ,QAAQ,EAAtB;AACA,QAAMK,OAAO,GACXD,KAAK,CAACE,aAAN,CAAoBC,MAApB,GAA6B,CAA7B,GACIH,KAAK,CAACE,aAAN,CAAoBF,KAAK,CAACE,aAAN,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDF,OADxD,GAEI,EAHN;AAIA,QAAMJ,OAAO,GAAGpB,UAAU,CAACqB,MAAX,CAAkBG,OAAlB,EAA2B,CAA3B,CAAhB;AACA,QAAMG,MAAM,GAAGP,OAAO,CAACQ,GAAR,CAAY,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,KAAT;AAAA,KAAhB,CAAf;AACA,WAAOhC,KAAK,CACTiC,IADI,CACC7B,eADD,EACkB;AAAEyB,MAAAA,MAAM,EAANA;AAAF,KADlB,EAEJK,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAChBlC,MAAAA,MAAM,CAACmC,OAAP,CACE,cADF,EAEE,8CAFF,EAGE/B,aAHF;AAKAe,MAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR;AACD,KATI,EAUJoB,KAVI,CAUE,UAAAC,KAAK,EAAI;AACd,YAAMA,KAAN;AACD,KAZI,CAAP;AAaD,GArBD;AAsBD,CAvBM","sourcesContent":["import axios from 'axios';\nimport { toastr } from 'react-redux-toastr';\nimport underscore from 'underscore';\n\nconst apiUrl = 'http://localhost:6999/users';\nconst apiSendUsersUrl = 'http://localhost:6999/send';\n\nconst toastrOptions = {\n  timeOut: 3000,\n  onCloseButtonClick: () => console.log('Close button was clicked'),\n  showCloseButton: false,\n};\n\nexport const ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport const MAIL_WINNERS = 'winners: mailWinnersAction';\n// export const WINNERS_VALIDATED = 'WINNERS_VALIDATED action';\n\nconst winnersSelected = users => {\n  return {\n    type: MAIL_WINNERS,\n    payload: {\n      users,\n    },\n  };\n};\n\nconst winnersValidated = () => {\n  return {\n    type: WINNERS_VALIDATED,\n  };\n};\n\nexport const selectWinnersAction = () => {\n  return (dispatch, getState) => {\n    const users = getState().users;\n    const sampled = underscore.sample(users, 3);\n    dispatch(winnersSelected(sampled));\n  };\n};\n\nexport const validateWinnersAction = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const winners =\n      state.winnersByWeek.length > 0\n        ? state.winnersByWeek[state.winnersByWeek.length - 1].winners\n        : [];\n    const sampled = underscore.sample(winners, 3);\n    const emails = sampled.map(item => item.email);\n    return axios\n      .post(apiSendUsersUrl, { emails })\n      .then(response => {\n        toastr.success(\n          'Confirmation',\n          'Un mail a bien été envoyé aux 3 participants',\n          toastrOptions,\n        );\n        dispatch(winnersValidated());\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}