{"ast":null,"code":"import axios from 'axios';\nimport { toastr } from 'react-redux-toastr';\nimport underscore from 'underscore';\nvar apiUrl = 'http://localhost:6999/users';\nvar apiSendUsersUrl = 'http://localhost:6999/send';\nvar toastrOptions = {\n  timeOut: 3000,\n  onCloseButtonClick: function onCloseButtonClick() {\n    return console.log('Close button was clicked');\n  },\n  showCloseButton: false\n};\nexport var ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport var MAIL_WINNERS = 'winners: mailWinnersAction';\nexport var WINNERS_VALIDATED = 'WINNERS_VALIDATED action';\n\nvar winnersSelected = function winnersSelected(users) {\n  return {\n    type: MAIL_WINNERS,\n    payload: {\n      users: users\n    }\n  };\n};\n\nvar winnersValidated = function winnersValidated() {\n  return {\n    type: WINNERS_VALIDATED\n  };\n};\n\nexport var selectWinnersAction = function selectWinnersAction() {\n  return function (dispatch, getState) {\n    var users = getState().users;\n    var sampled = underscore.sample(users, 3);\n    dispatch(winnersSelected(sampled));\n  };\n};\nexport var validateWinnersAction = function validateWinnersAction() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var winners = state.winnersByWeek.length > 0 ? state.winnersByWeek[state.winnersByWeek.length - 1].winners : [];\n    var sampled = underscore.sample(winners, 3);\n    var emails = sampled.map(function (item) {\n      return item.email;\n    });\n    return axios.post(apiSendUsersUrl, {\n      emails: emails\n    }).then(function (response) {\n      toastr.success('Confirmation', 'Un mail a bien été envoyé aux 3 participants', toastrOptions);\n      dispatch(winnersValidated());\n    }).catch(function (error) {\n      throw error;\n    });\n  };\n}; //Action to send mail to 3 winners\n// export const mailWinnersAction = (data) => {\n//     return (dispatch) => {\n//        return axios.post(apiSendUsersUrl, data) \n//         .then(response => {\n//           dispatch(mailWinners(response.data))\n//         })\n//         .catch(error => {\n//           throw(error);\n//         });\n//     };\n//   };","map":{"version":3,"sources":["/home/emleb/Projets perso/Breakfast/src/Actions/winnerActions.js"],"names":["axios","toastr","underscore","apiUrl","apiSendUsersUrl","toastrOptions","timeOut","onCloseButtonClick","console","log","showCloseButton","ADD_WINNERS_BY_WEEK","MAIL_WINNERS","WINNERS_VALIDATED","winnersSelected","users","type","payload","winnersValidated","selectWinnersAction","dispatch","getState","sampled","sample","validateWinnersAction","state","winners","winnersByWeek","length","emails","map","item","email","post","then","response","success","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,oBAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAMC,MAAM,GAAG,6BAAf;AACA,IAAMC,eAAe,GAAG,4BAAxB;AAEA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,IADS;AAElBC,EAAAA,kBAAkB,EAAE;AAAA,WAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAN;AAAA,GAFF;AAGlBC,EAAAA,eAAe,EAAE;AAHC,CAAtB;AAMA,OAAO,IAAMC,mBAAmB,GAAG,iCAA5B;AACP,OAAO,IAAMC,YAAY,GAAG,4BAArB;AACP,OAAO,IAAMC,iBAAiB,GAAG,0BAA1B;;AAGP,IAAMC,eAAe,GAAI,SAAnBA,eAAmB,CAACC,KAAD,EAAW;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,YADD;AAELK,IAAAA,OAAO,EAAE;AACPF,MAAAA,KAAK,EAALA;AADO;AAFJ,GAAP;AAMD,CAPH;;AAUA,IAAMG,gBAAgB,GAAI,SAApBA,gBAAoB,GAAM;AAC5B,SAAO;AACLF,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD,CAJH;;AAOE,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAMN,KAAK,GAAGM,QAAQ,GAAGN,KAAzB;AACA,QAAMO,OAAO,GAAGpB,UAAU,CAACqB,MAAX,CAAkBR,KAAlB,EAAyB,CAAzB,CAAhB;AACAK,IAAAA,QAAQ,CAACN,eAAe,CAACQ,OAAD,CAAhB,CAAR;AACH,GAJD;AAKD,CANM;AASP,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACzC,SAAO,UAACJ,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAMI,KAAK,GAAGJ,QAAQ,EAAtB;AACA,QAAMK,OAAO,GAAGD,KAAK,CAACE,aAAN,CAAoBC,MAApB,GAA6B,CAA7B,GAAiCH,KAAK,CAACE,aAAN,CAAoBF,KAAK,CAACE,aAAN,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDF,OAArF,GAA+F,EAA/G;AACA,QAAMJ,OAAO,GAAGpB,UAAU,CAACqB,MAAX,CAAkBG,OAAlB,EAA2B,CAA3B,CAAhB;AACA,QAAMG,MAAM,GAAGP,OAAO,CAACQ,GAAR,CAAY,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,KAAT;AAAA,KAAhB,CAAf;AACA,WAAOhC,KAAK,CAACiC,IAAN,CAAW7B,eAAX,EAA4B;AAACyB,MAAAA,MAAM,EAANA;AAAD,KAA5B,EACFK,IADE,CACG,UAAAC,QAAQ,EAAI;AACdlC,MAAAA,MAAM,CAACmC,OAAP,CAAe,cAAf,EAA+B,8CAA/B,EAA+E/B,aAA/E;AACAe,MAAAA,QAAQ,CAACF,gBAAgB,EAAjB,CAAR;AACH,KAJE,EAKFmB,KALE,CAKI,UAAAC,KAAK,EAAI;AACZ,YAAMA,KAAN;AACH,KAPE,CAAP;AAQH,GAbD;AAcD,CAfM,C,CAmBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport {toastr} from 'react-redux-toastr'\nimport underscore from 'underscore';\n\nconst apiUrl = 'http://localhost:6999/users';\nconst apiSendUsersUrl = 'http://localhost:6999/send';\n\nconst toastrOptions = {\n    timeOut: 3000, \n    onCloseButtonClick: () => console.log('Close button was clicked'),\n    showCloseButton: false, \n}\n   \nexport const ADD_WINNERS_BY_WEEK = 'winners: addWinnersByWeekAction';\nexport const MAIL_WINNERS = 'winners: mailWinnersAction';\nexport const WINNERS_VALIDATED = 'WINNERS_VALIDATED action';\n\n\nconst winnersSelected =  (users) => {\n    return {\n      type: MAIL_WINNERS,\n      payload: {\n        users\n      }\n    }\n  };\n  \n  \nconst winnersValidated =  () => {\n    return {\n      type: WINNERS_VALIDATED\n    }\n  };\n\n\n  export const selectWinnersAction = () => {\n    return (dispatch, getState) => {\n        const users = getState().users;\n        const sampled = underscore.sample(users, 3)\n        dispatch(winnersSelected(sampled))\n    }\n  }\n\n  \n  export const validateWinnersAction = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const winners = state.winnersByWeek.length > 0 ? state.winnersByWeek[state.winnersByWeek.length - 1].winners : []\n        const sampled = underscore.sample(winners, 3)\n        const emails = sampled.map(item => item.email)\n        return axios.post(apiSendUsersUrl, {emails}) \n            .then(response => {\n                toastr.success('Confirmation', 'Un mail a bien été envoyé aux 3 participants', toastrOptions)\n                dispatch(winnersValidated())\n            })\n            .catch(error => {\n                throw(error);\n            });\n    }\n  }\n\n \n\n//Action to send mail to 3 winners\n// export const mailWinnersAction = (data) => {\n//     return (dispatch) => {\n//        return axios.post(apiSendUsersUrl, data) \n//         .then(response => {\n//           dispatch(mailWinners(response.data))\n//         })\n//         .catch(error => {\n//           throw(error);\n//         });\n//     };\n//   };\n  \n  \n  "]},"metadata":{},"sourceType":"module"}