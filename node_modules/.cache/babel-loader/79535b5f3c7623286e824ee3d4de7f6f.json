{"ast":null,"code":"import _classCallCheck from \"/home/emleb/projets/breakfast/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/emleb/projets/breakfast/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/emleb/projets/breakfast/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/emleb/projets/breakfast/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/emleb/projets/breakfast/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/emleb/projets/breakfast/src/Components/Winners.js\";\nimport React, { Component } from 'react';\nimport './Winners.css';\nimport axios from 'axios';\nimport underscore from 'underscore';\n\nvar Winners =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Winners, _Component);\n\n  function Winners(props) {\n    var _this;\n\n    _classCallCheck(this, Winners);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Winners).call(this, props));\n\n    _this.sampleList = function (index, nom_prenom) {\n      var sampled = underscore.sample(_this.state.liste, 3);\n      sampled[(index, nom_prenom)] = !_this.state.liste[(index, nom_prenom)];\n\n      _this.setState({\n        liste: sampled\n      });\n\n      console.log(sampled);\n    };\n\n    _this.state = {\n      liste: [] //dès le chargement , je stocke dans le state, le résultat de mon fetch\n\n    };\n    axios.get('http://localhost:6999/liste').then(function (result) {\n      _this.setState({\n        liste: result.data\n      });\n    });\n    return _this;\n  } //Méthode permettant de produire une liste aléatoire de 3 personnes\n  //le setState ne lit pas les index d'un tableau, donc il faut déclarer une variable, et lui donner la valeur de \"characters\".\n\n\n  _createClass(Winners, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.sampleList);\n    }\n  }]);\n\n  return Winners;\n}(Component);\n\nexport default Winners;","map":{"version":3,"sources":["/home/emleb/projets/breakfast/src/Components/Winners.js"],"names":["React","Component","axios","underscore","Winners","props","sampleList","index","nom_prenom","sampled","sample","state","liste","setState","console","log","get","then","result","data"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;;IAEMC,O;;;;;AACF,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iFAAMA,KAAN;;AADe,UAcvBC,UAduB,GAcV,UAACC,KAAD,EAAQC,UAAR,EAAuB;AAChC,UAAIC,OAAO,GAAGN,UAAU,CAACO,MAAX,CAAkB,MAAKC,KAAL,CAAWC,KAA7B,EAAoC,CAApC,CAAd;AACAH,MAAAA,OAAO,EAACF,KAAK,EAAEC,UAAR,EAAP,GAA6B,CAAE,MAAKG,KAAL,CAAWC,KAAX,EAAiBL,KAAK,EAAEC,UAAxB,EAA/B;;AACA,YAAKK,QAAL,CAAc;AACVD,QAAAA,KAAK,EAAEH;AADG,OAAd;;AAGAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACH,KArBsB;;AAEf,UAAKE,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE,CAGb;;AAHa,KAAb;AAIAV,IAAAA,KAAK,CAACc,GAAN,CAAU,6BAAV,EACCC,IADD,CACM,UAACC,MAAD,EAAY;AACd,YAAKL,QAAL,CAAc;AAACD,QAAAA,KAAK,EAAEM,MAAM,CAACC;AAAf,OAAd;AACH,KAHD;AANe;AAUlB,G,CAEL;AACA;;;;;6BAUa;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKb,UADX,CADJ;AAKH;;;;EA9BiBL,S;;AAiCtB,eAAeG,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport './Winners.css'\nimport axios from 'axios';\n\nimport underscore from 'underscore';\n\nclass Winners extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            liste: []\n        }\n        //dès le chargement , je stocke dans le state, le résultat de mon fetch\n        axios.get('http://localhost:6999/liste')\n        .then((result) => {\n            this.setState({liste: result.data})\n        });\n    }\n\n//Méthode permettant de produire une liste aléatoire de 3 personnes\n//le setState ne lit pas les index d'un tableau, donc il faut déclarer une variable, et lui donner la valeur de \"characters\".\nsampleList = (index, nom_prenom) => {\n    let sampled = underscore.sample(this.state.liste, 3)\n    sampled[index, nom_prenom] = ! this.state.liste[index, nom_prenom]\n    this.setState({\n        liste: sampled\n    })\n    console.log(sampled)\n}\n\n    render() {\n        return (\n            <div>\n                 {this.sampleList} \n            </div>\n        )\n    }\n}\n\nexport default Winners;"]},"metadata":{},"sourceType":"module"}